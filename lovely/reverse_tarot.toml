[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Sprite:draw_self
[[patches]]
[patches.pattern]
target = "engine/sprite.lua"
pattern = '''
0,
self.VT.w/(self.T.w),
self.VT.h/(self.T.h)
'''
position = "at"
match_indent = true
payload = '''
self.reverse and math.pi, self.VT.w / self.T.w, self.VT.h / self.T.h, self.reverse and self.scale.x, self.reverse and self.scale.y
'''

# create_UIBox_your_collection
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "consumable_nodes[#consumable_nodes+1] = UIBox_button({button = id, label = {localize('b_'..key:lower()..'_cards')}, count = G.DISCOVER_TALLIES[key:lower()..'s'], minw = 4, id = id, colour = G.C.SECONDARY_SET[key]})"
position = "at"
match_indent = true
payload = '''
consumable_nodes[#consumable_nodes + 1] = UIBox_button{button = id, label = {localize("b_" .. key:lower() .. "_cards")}, count = G.DISCOVER_TALLIES[key:lower() .. "s"], minw = 4, id = id, colour = G.C.SECONDARY_SET[key], font = SMODS.ConsumableTypes[key].font}
'''

# buildAdditionsTab
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/ui.lua"]'
pattern = "consumable_nodes[#consumable_nodes+1] = UIBox_button({button = id, label = {localize('b_'..key:lower()..'_cards')}, count = tally, minw = 4, id = id, colour = G.C.SECONDARY_SET[key], text_colour = G.C.UI[key]})"
position = "at"
match_indent = true
payload = '''
consumable_nodes[#consumable_nodes + 1] = UIBox_button{button = id, label = {localize("b_" .. key:lower() .. "_cards")}, count = tally, minw = 4, id = id, colour = G.C.SECONDARY_SET[key], text_colour = G.C.UI[key], font = SMODS.ConsumableTypes[key].font}
'''

# UIBox_button
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{n=G.UIT.T, config={text = v, scale = args.scale, colour = args.text_colour, shadow = args.shadow, focus_args = button_pip and args.focus_args or nil, func = button_pip, ref_table = args.ref_table}}"
position = "at"
match_indent = true
payload = '''
{n = G.UIT.T, config = {text = v, scale = args.scale, colour = args.text_colour, shadow = args.shadow, focus_args = button_pip and args.focus_args or nil, func = button_pip, ref_table = args.ref_table, font = args.font}}
'''

# create_badge
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "  function create_badge(_string, _badge_col, _text_col, scaling)"
position = "at"
match_indent = true
payload = '''
function create_badge(_string, _badge_col, _text_col, scaling, font)
'''

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{n=G.UIT.O, config={object = DynaText({string = _string or 'ERROR', colours = {_text_col or G.C.WHITE},float = true, shadow = true, offset_y = -0.05, silent = true, spacing = 1, scale = 0.33*scaling})}},"
position = "at"
match_indent = true
payload = '''
{n = G.UIT.O, config = {object = DynaText{string = _string or "ERROR", colours = {_text_col or G.C.WHITE}, float = true, shadow = true, offset_y = -0.05, silent = true, spacing = 1, scale = 0.33 * scaling, font = font}}},
'''

# set_consumeable_usage
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "if card.config.center.set == 'Tarot' then"
position = "at"
match_indent = true
payload = '''
if card.config.center.set == "Tarot" or card.config.center.set == "manifold_reverse_tarot" then
'''

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "if card.config.center.set == 'Tarot' or card.config.center.set == 'Planet' then"
position = "at"
match_indent = true
payload = '''
if card.config.center.set == "Tarot" or card.config.center.set == "Planet" or card.config.center.set == "manifold_reverse_tarot" then
'''

# G.FUNCS.buy_from_shop
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "elseif c1.config.center.set == 'Tarot' then"
position = "at"
match_indent = true
payload = '''
elseif c1.config.center.set == "Tarot" or c1.config.center.set == "manifold_reverse_tarot" then
'''

# Card:calculate_joker
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability.name == 'Fortune Teller' and not context.blueprint and (context.consumeable.ability.set == "Tarot") then'''
position = "at"
match_indent = true
payload = '''
if self.ability.name == "Fortune Teller" and not context.blueprint and (context.consumeable.ability.set == "Tarot" or context.consumeable.ability.set == "manifold_reverse_tarot") then
'''