[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Planet slot
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.jokers = CardArea("
position = "before"
match_indent = true
payload = '''
self.planets = CardArea(0, CAI.consumeable_H + 0.3, CAI.consumeable_W / 2, CAI.consumeable_H, {card_limit = self.GAME.starting_params.planet_slots, type = "joker", highlight_limit = 1})
'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "G.consumeables.T.y = 0"
position = "after"
match_indent = true
payload = '''
G.planets.T.x = G.consumeables.T.x + G.consumeables.T.w / 2
G.planets.T.y = G.consumeables.T.y + G.consumeables.T.h + 0.4
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '((self.area == G.jokers) or (self.area == G.consumeables)) and "cr" or'
position = "at"
match_indent = true
payload = '''
(self.area == G.jokers or self.area == G.consumeables or self.area == G.planets) and "cr" or
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "((self.area == G.jokers) or (self.area == G.consumeables)) and {x=x_off - 0.4,y=0} or"
position = "at"
match_indent = true
payload = '''
(self.area == G.jokers or self.area == G.consumeables or self.area == G.planets) and {x = x_off - 0.4, y = 0} or
'''

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "consumable_slots = 2,"
position = "after"
match_indent = true
payload = "planet_slots = 1,"

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "consumeable_buffer = 0,"
position = "after"
match_indent = true
payload = "planet_buffer = 0,"

# Buying planets
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.consumeables:emplace(c1)"
position = "at"
match_indent = true
payload = '''
if c1.config.center.set == "Planet" then
    G.planets:emplace(c1)
else
    G.consumeables:emplace(c1)
end
'''

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern =  '''
not (card.ability.consumeable and #G.consumeables.cards < G.consumeables.config.card_limit + ((card.edition and card.edition.negative) and 1 or 0)) then
    alert_no_space(card, card.ability.consumeable and G.consumeables or G.jokers)
'''
position = "at"
match_indent = true
payload = '''
not (card.ability.consumeable and card.config.center.set == "Planet" and #G.planets.cards < G.planets.config.card_limit + ((card.edition and card.edition.negative) and 1 or 0)) and
not (card.ability.consumeable and card.config.center.set ~= "Planet" and #G.consumeables.cards < G.consumeables.config.card_limit + ((card.edition and card.edition.negative) and 1 or 0)) then
    if card.ability.consumeable then
        if card.config.center.set == "Planet" then
            alert_no_space(card, G.planets)
        else
            alert_no_space(card, G.consumeables)
        end
    else
        alert_no_space(G.jokers)
    end
'''

# Blue seals
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.seal == 'Blue' and #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit and not self.ability.extra_enhancement then"
position = "at"
match_indent = true
payload = '''
if self.seal == "Blue" and #G.planets.cards + G.GAME.planet_buffer < G.planets.config.card_limit and not self.ability.extra_enhancement then
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1"
position = "at"
match_indent = true
payload = '''
G.GAME.planet_buffer = G.GAME.planet_buffer + 1
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
G.consumeables:emplace(card)
G.GAME.consumeable_buffer = 0
'''
position = "at"
match_indent = true
payload = '''
G.planets:emplace(card)
G.GAME.planet_buffer = 0
'''

# The Fool
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card('Tarot_Planet', G.consumeables, nil, nil, nil, nil, G.GAME.last_tarot_planet, 'fool')"
position = "at"
match_indent = true
payload = '''
local card = create_card("Tarot", G.consumeables, nil, nil, nil, nil, G.GAME.last_tarot, "fool")
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "and G.GAME.last_tarot_planet and G.GAME.last_tarot_planet ~= 'c_fool' then return true end"
position = "at"
match_indent = true
payload = '''
and G.GAME.last_tarot and G.GAME.last_tarot ~= "c_fool" then return true end
'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local fool_c = G.GAME.last_tarot_planet and G.P_CENTERS[G.GAME.last_tarot_planet] or nil"
position = "at"
match_indent = true
payload = '''
local fool_c = G.GAME.last_tarot and G.P_CENTERS[G.GAME.last_tarot] or nil
'''

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "G.GAME.last_tarot_planet = card.config.center_key"
position = "after"
match_indent = true
payload = '''
if card.config.center.set == "Planet" then
    G.GAME.last_planet = card.config.center_key
else
    G.GAME.last_tarot = card.config.center_key
end
'''

# Observatory
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "local t = {G.jokers, G.consumeables, G.vouchers}"
position = "at"
match_indent = true
payload = '''
local t = {G.jokers, G.consumeables, G.planets, G.vouchers}
'''

# Negative
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "badges[#badges + 1] = 'negative_consumable'"
position = "at"
match_indent = true
payload = '''
badges[#badges + 1] = self.config.center.set == "Planet" and "negative_planet" or "negative_consumable"
'''

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "if v == 'negative_consumable' or v == 'negative_playing_card' then v = 'negative' end"
position = "at"
match_indent = true
payload = '''
if v == "negative_consumable" or v == "negative_planet" or v == "negative_playing_card" then v = "negative" end
'''

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = "G.consumeables.config.card_limit = G.consumeables.config.card_limit + v"
position = "at"
match_indent = true
payload = '''
if self.config.center.set == "Planet" then
    G.planets.config.card_limit = G.planets.config.card_limit + v
else
    G.consumeables.config.card_limit = G.consumeables.config.card_limit + v
end
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.consumeables.config.card_limit = G.consumeables.config.card_limit + self.edition.card_limit"
position = "at"
match_indent = true
payload = '''
if self.config.center.set == "Planet" then
    G.planets.config.card_limit = G.planets.config.card_limit + self.edition.card_limit
else
    G.consumeables.config.card_limit = G.consumeables.config.card_limit + self.edition.card_limit
end
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.consumeables.config.card_limit = G.consumeables.config.card_limit - self.edition.card_limit"
times = 2
position = "at"
match_indent = true
payload = '''
if self.config.center.set == "Planet" then
    G.planets.config.card_limit = G.planets.config.card_limit - self.edition.card_limit
else
    G.consumeables.config.card_limit = G.consumeables.config.card_limit - self.edition.card_limit
end
'''

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = "elseif self.ability.set == 'Joker' and self.area == G.jokers then"
position = "before"
match_indent = true
payload = '''
elseif self.ability.consumeable and self.area == G.planets then
    G.planets.config.card_limit = G.planets.config.card_limit - self.edition.card_limit
'''

# Debug
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local _area = G.P_CENTERS[joker].consumeable and G.consumeables or G.jokers"
position = "at"
match_indent = true
payload = '''
local _area = G.P_CENTERS[joker].consumeable and (G.P_CENTERS[joker].set == "Planet" and G.planets or G.consumeables) or G.jokers
'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif G.consumeables then G.consumeables:emplace(card) end"
position = "at"
match_indent = true
payload = '''
elseif G.consumeables then if card.config.center.set == "Planet" then G.planets:emplace(card) else G.consumeables:emplace(card) end end
'''

# Multiplayer