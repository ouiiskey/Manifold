[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Planet slot
# Game:start_run
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.jokers = CardArea("
position = "before"
match_indent = true
payload = '''
self.planets = CardArea(0, CAI.consumeable_H + 0.3, CAI.consumeable_W / 2, CAI.consumeable_H, {card_limit = self.GAME.starting_params.planet_slots, type = "joker", highlight_limit = 1})
'''

# set_screen_positions
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "G.consumeables.T.y = 0"
position = "after"
match_indent = true
payload = '''
G.planets.T.x = G.consumeables.T.x + G.consumeables.T.w / 2
G.planets.T.y = G.consumeables.T.y + G.consumeables.T.h + 0.4
'''

# Card:highlight
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '((self.area == G.jokers) or (self.area == G.consumeables)) and "cr" or'
position = "at"
match_indent = true
payload = '''
(self.area == G.jokers or self.area == G.consumeables or self.area == G.planets) and "cr" or
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "((self.area == G.jokers) or (self.area == G.consumeables)) and {x=x_off - 0.4,y=0} or"
position = "at"
match_indent = true
payload = '''
(self.area == G.jokers or self.area == G.consumeables or self.area == G.planets) and {x = x_off - 0.4, y = 0} or
'''

# get_starting_params
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "consumable_slots = 2,"
position = "after"
match_indent = true
payload = "planet_slots = 1,"

# Game:init_game_object
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "consumeable_buffer = 0,"
position = "after"
match_indent = true
payload = "planet_buffer = 0,"

# Buying planets
# G.FUNCS.buy_from_shop
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.consumeables:emplace(c1)"
position = "at"
match_indent = true
payload = '''
if c1.config.center.set == "Planet" then
    G.planets:emplace(c1)
else
    G.consumeables:emplace(c1)
end
'''

# G.FUNCS.check_for_buy_space
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern =  '''
not (card.ability.consumeable and #G.consumeables.cards < G.consumeables.config.card_limit + card.ability.card_limit - card.ability.extra_slots_used) then
    alert_no_space(card, card.ability.consumeable and G.consumeables or G.jokers)
'''
position = "at"
match_indent = true
payload = '''
not (card.ability.consumeable and card.config.center.set == "Planet" and #G.planets.cards < G.planets.config.card_limit + card.ability.card_limit - card.ability.extra_slots_used) and
not (card.ability.consumeable and card.config.center.set ~= "Planet" and #G.consumeables.cards < G.consumeables.config.card_limit + card.ability.card_limit - card.ability.extra_slots_used) then
    if card.ability.consumeable then
        if card.config.center.set == "Planet" then
            alert_no_space(card, G.planets)
        else
            alert_no_space(card, G.consumeables)
        end
    else
        alert_no_space(card, G.jokers)
    end
'''

# alert_no_space
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "scale = 0.9, text = localize('k_no_space_ex'), hold = 0.9, align = 'cm',"
position = "at"
match_indent = true
payload = '''
scale = 0.9, text = area == G.planets and {localize("manifold_no_space_1"), localize("manifold_no_space_2")} or localize("k_no_space_ex"), hold = 0.9, align = "cm",
'''

# Blue seals
# Card:get_end_of_round_effect
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.seal == 'Blue' and #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit and not self.ability.extra_enhancement then"
position = "at"
match_indent = true
payload = '''
if self.seal == "Blue" and (#G.planets.cards + G.GAME.planet_buffer < G.planets.config.card_limit or G.GAME.selected_back_key.key == "b_manifold_syzygy") and not self.ability.extra_enhancement then
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
local card_type = 'Planet'
G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1
'''
position = "at"
match_indent = true
payload = '''
local card_type = "Planet"
G.GAME.planet_buffer = G.GAME.planet_buffer + 1
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
local card = create_card(card_type,G.consumeables, nil, nil, nil, nil, _planet, 'blusl')
card:add_to_deck()
G.consumeables:emplace(card)
G.GAME.consumeable_buffer = 0
'''
position = "at"
match_indent = true
payload = '''
SMODS.add_card{set = card_type, area = G.planets, key = _planet, key_append = "blusl"}
G.GAME.planet_buffer = 0
'''

# The Fool
# Card:use_consumeable
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card('Tarot_Planet', G.consumeables, nil, nil, nil, nil, G.GAME.last_tarot_planet, 'fool')"
position = "at"
match_indent = true
payload = '''
local card = SMODS.create_card{set = "Tarot", area = G.consumeables, key = G.GAME.last_tarot, key_append = "fool"}
'''

# Card:can_use_consumeable
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "and G.GAME.last_tarot_planet and G.GAME.last_tarot_planet ~= 'c_fool' then return true end"
position = "at"
match_indent = true
payload = '''
and G.GAME.last_tarot and G.GAME.last_tarot ~= "c_fool" then return true end
'''

# generate_card_ui
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local fool_c = G.GAME.last_tarot_planet and G.P_CENTERS[G.GAME.last_tarot_planet] or nil"
position = "at"
match_indent = true
payload = '''
local fool_c = G.GAME.last_tarot and G.P_CENTERS[G.GAME.last_tarot] or nil
'''

# set_consumeable_usage
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "G.GAME.last_tarot_planet = card.config.center_key"
position = "after"
match_indent = true
payload = '''
if card.config.center.set == "Planet" then
    G.GAME.last_planet = card.config.center_key
elseif card.config.center.set == "manifold_reverse_tarot" then
    G.GAME.last_tarot = MANIF.get_reverse_key(card)
else
    G.GAME.last_tarot = card.config.center_key
end
'''

# Observatory
# SMODS.get_card_areas
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "local t = {G.jokers, G.consumeables, G.vouchers}"
position = "at"
match_indent = true
payload = '''
local t = {G.jokers, G.consumeables, G.planets, G.vouchers}
'''

# Debug
# add_joker
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local _area = G.P_CENTERS[joker].consumeable and G.consumeables or G.jokers"
position = "at"
match_indent = true
payload = '''
local _area = G.P_CENTERS[joker].consumeable and (G.P_CENTERS[joker].set == "Planet" and G.planets or G.consumeables) or G.jokers
'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif G.consumeables then G.consumeables:emplace(card) end"
position = "at"
match_indent = true
payload = '''
elseif G.consumeables then if card.config.center.set == "Planet" then G.planets:emplace(card) else G.consumeables:emplace(card) end end
'''

# Collection
# create_UIBox_your_collection
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '{n=G.UIT.R, config={align = "cm", padding = 0.1, r=0.2, colour = G.C.BLACK}, nodes={'
position = "before"
match_indent = true
payload = '''
UIBox_button({button = "your_collection_planets", label = {localize("b_planet_cards")}, count = G.DISCOVER_TALLIES.planets, minw = 5, id = "your_collection_planets", colour = G.C.SECONDARY_SET.Planet}),
'''

# loadAPIs
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/game_object.lua"]'
pattern = "secondary_colour = G.C.SECONDARY_SET.Planet,"
position = "after"
match_indent = true
payload = '''
no_collection = true,
'''