[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[vars]
proso = 'next(SMODS.find_card("j_manifold_prosopagnosia"))'
proso_id = 'G.hand.cards[i]:is_face() and next(SMODS.find_card("j_manifold_prosopagnosia")) and MANIF.PROSO.rank or G.hand.cards[i].base.id'

# get_straight
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = "min_length = min_length or 5"
position = "before"
match_indent = true
payload = '''
if next(SMODS.find_card("j_pareidolia")) and {{lovely:proso}} then return {} end
'''

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = "for _,v in ipairs(rank.next) do"
position = "at"
match_indent = true
payload = '''
for _,v in ipairs({{lovely:proso}} and MANIF.PROSO.next[key] or rank.next) do
'''

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = "for _,w in ipairs(SMODS.Ranks[v].next) do"
position = "at"
match_indent = true
payload = '''
for _,w in ipairs({{lovely:proso}} and MANIF.PROSO.next[v] or SMODS.Ranks[v].next) do
'''

# get_X_same
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "if hand[i]:get_id() == hand[j]:get_id() and i ~= j then"
position = "at"
match_indent = true
payload = '''
if hand[i]:is_rank(hand[j]:get_id()) and i ~= j then
'''

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "vals[curr[1]:get_id()] = curr"
position = "at"
match_indent = true
payload = '''
vals[{{lovely:proso}} and curr[1]:is_face() and MANIF.PROSO.rank or curr[1]:get_id()] = curr
'''

# Raised Fist
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if temp_ID >= G.hand.cards[i].base.id and not SMODS.has_no_rank(G.hand.cards[i]) then"
position = "at"
match_indent = true
payload = '''
if temp_ID >= ({{lovely:proso_id}}) and not SMODS.has_no_rank(G.hand.cards[i]) then
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "temp_ID = G.hand.cards[i].base.id"
position = "at"
match_indent = true
payload = '''
temp_ID = {{lovely:proso_id}}
'''